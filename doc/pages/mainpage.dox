/*!
\mainpage Main page

\c mocasinns (Monte Carlo simulations neat'n'simple) is a C++ template library for using various kinds of Monte Carlo simulations on arbitrary, user-defined systems.
It enables the user to write just once the code for the definition of the system and use all different types of Monte Carlo algorithm without changing the code of the system.

\section introduction Why to use Mocasinns?
In computer science it is common to use third-party libraries for encapsulating solutions of problems that often occur when writing code. 
Unfortunately this good practise is not as common in the field of computer physics, many physicists just write code for their simulations on their own and thereby duplicate existing code. 
By doing so they loose time for writing code that they can use for doing real physics. 

The library \c mocasinns that we will present in this paper would like to adress this situation in Markov Chain Monte Carlo simulations.
We made the observation that a lot of physical systems can be described in terms of a common interface, and that most Markov Chain Monte Carlo simulations just need the data provided by this interface.
By writing a generic library that demands just the simple common interface, but provides a rich choice of simulation algorithms, analysis tools and data management, we give the user a one-fits-all solution for applying modern MCMC algorithms on his problem without the need of altering his code for the concrete system.

\section installation Installation

At present there is no automatic installer for the mocainns template library.
Since it consists only of include files, it is enough to copy the directory include/mocasinns to a directory of your choice, for example directly into your project directory or to /usr/include on a linux machine.

\section tutorial Tutorial

There is a \ref page_tutorial "Tutorial" for an easy start with the template library.

\section algorithms Implemented algorithms

List of implemented algorithms. For details of the algorithm see the documentation of the respective classes
- \link Mocasinns::Metropolis Metropolis\endlink algorithm
- \link Mocasinns::MetropolisHastings Metropolis-Hastings\endlink algorithm (Metropolis algorithm to an arbitrary non-Boltzman distribution)
- \link Mocasinns::ParallelTempering Parallel Tempering/Replica exchange\endlink (There is also an implementation for a \link Mocasinns::SerialTempering non-parallel replica exchange\endlink algorithm).
- \link Mocasinns::EntropicSampling Entropic sampling\endlink
- \link Mocasinns::WangLandau Wang-Landau\endlink algorithm
- \link Mocasinns::OptimalEnsembleSampling Optimal ensemble sampling\endlink algorithm.

\section mainpage-concepts Included concepts

In the mocasinns framework there exists the following concepts that have to be fulfilled by the user provided code. (See \link page_concepts Concepts\endlink for an overview)

- \ref concept-ConfigurationType "ConfigurationType": Concept for a (physical) system that should be simulated (e.g. an Ising spin chain)
- \ref concept-StepType "StepType": Concept for the steps that link different systems in the Markov chain (e.g. a spin flip in the Ising model)
- \ref concept-EnergyType "EnergyType": Concept for the energy of the system and the energy difference induced by a step
- \ref concept-ObservableType "ObservableType": Concept for any quantity that can be measured in a system (e.g. the magnetization of the Ising spin chain)
- \ref concept-RandomNumberGenerator "RandomNumberGenerator": Concept for the random number generators used.
- \ref concept-Observator "Observator": Concept for a functor that is used to extract an observable from the configuration 
- \ref concept-HistoType "HistoType": Concept for a histogram.

*/